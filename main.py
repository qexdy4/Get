import asyncio
import random
from aiohttp import web
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import SendMessageRequest
from telethon.errors import FloodWaitError, RPCError

# --- Telegram API ---
API_ID = 29739265  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_ID
API_HASH = "9475db10c792d716e97a51f608871263"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_HASH
SESSION_NAME = "joiner_session"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ ---
PROXY_IP = "98.152.200.61"  
PROXY_PORT = 8081  
PROXY_TYPE = "http"  # –ò–∑–º–µ–Ω–∏ –Ω–∞ "socks5", –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å SOCKS5

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏
if PROXY_TYPE == "socks5":
    PROXY = (PROXY_IP, PROXY_PORT, "socks5")
elif PROXY_TYPE == "http":
    PROXY = ("http", PROXY_IP, PROXY_PORT)
else:
    PROXY = None  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏

massage1 = """‚ôªÔ∏è –•–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ?
–†–µ–∫–ª–∞–º–∏—Ä—É–π –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π –¥–µ–Ω—å–≥–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üìà
üî∏ –ß–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–≤—ë–ª –ª—é–¥–µ–π ‚Äì —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª!
üî∏ –†–∞–±–æ—Ç–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π –∏ –æ–ø—ã—Ç–∞
üî∏ –í—Å–µ–≥–æ –ø–∞—Ä—É –¥–µ–π—Å—Ç–≤–∏–π ‚Äì –∏ –¥–µ–Ω—å–≥–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∫–∞–ø–∞—Ç—å –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å üí∞
–ü–∏—à–∏ –º–Ω–µ –≤ –ª—Å –∏ –Ω–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

async def send_messages():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram."""
    while True:
        try:
            async with TelegramClient(SESSION_NAME, API_ID, API_HASH, proxy=PROXY) as client:
                await client.start()
                if not await client.is_user_authorized():
                    print("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                    return
                
                with open("chats.txt", "r", encoding="utf-8") as file:
                    chats = [line.strip() for line in file if line.strip()]
                
                for chat in chats:
                    try:
                        await client(SendMessageRequest(chat, massage1))
                        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat}")
                        delay = random.uniform(30, 60)  
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...")
                        await asyncio.sleep(delay)
                    except FloodWaitError as e:
                        print(f"‚ö†Ô∏è FloodWait: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥.")
                        await asyncio.sleep(e.seconds)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat}: {e}")

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫...")
            await asyncio.sleep(30)  

async def handle(request):
    return web.Response(text="–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    return app

async def main():
    asyncio.create_task(send_messages())  

    app = await web_server()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    print("üåç –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080...")
    while True:
        await asyncio.sleep(3600)  

asyncio.run(main())
